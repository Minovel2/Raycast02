Синтаксис: new Ray(maxSteps, x,y,z, tpx,tpy,tpz, func, options)
Другой синтаксис: player.createRay(maxSteps, func, options)

Пример создания луча в двух вариантах:
1) new Ray(10,1,2,3,4,5,6, (obj) => {
        over.runCommandAsync(`particle minecraft:basic_flame_particle ${obj.x} ${obj.y} ${obj.z}`);
    }, {
        multiply: 1,
        dimension: world.getDimension("overworld"),
        source: world.getAllPlayers()[0],
        ignoreBlocks: false,
        autoMove: true,
        onDeathFunc: function() {
            over.runCommandAsync(`say луч удалён`);
        },
        stepsPerTick: 0.5,
        l: 0
    } )
2) world.getAllPlayers()[0].createRay(10, (obj) => {
        over.runCommandAsync(`particle minecraft:basic_flame_particle ${obj.x} ${obj.y} ${obj.z}`);
    }, {
        multiply: 1,
        ignoreBlocks: false,
        autoMove: true,
        onDeathFunc: function() {
            over.runCommandAsync(`say луч удалён`);
        },
        stepsPerTick: 0.5,
        l: 0
    } );

Подробнее про каждый параметр:
1) maxSteps:
  Обязательный?: да
  Тип данных: number
  Зачем нужен?: задаёт максимальное количество "шагов" для луча, пройдя их луч удалится автоматически.
2,3,4) x, y, z:
  Обязательный?: да
  Тип данных: number
  Зачем нужен?: это координата в которой появляется луч.
5,6,7) tpx, tpy, tpz:
  Обязательный?: да
  Тип данных: number
  Зачем нужен?: это вектор, задающий движение луча в пространстве по модулю и по направлению.
8) func:
  Обязательный?: да
  Тип данных: Function
  Зачем нужен?: выполняет эту функцию при каждом перемещении луча
  Дополнительно: функция принимает в качестве параметра объект луча, к свойствам которого можно обращаться в функции, подробнее про эти свойства ниже.
9) options:
  Обязательный?: нет
  Тип данных: Object
  Зачем нужен?: это доп. параметры для продвинутой настройки луча. Почему он сделан в виде объекта? Для того, чтобы можно было вводить параметры не по порядку, как в функции.

Параметры объекта options (можно указывать в любом порядке, все они НЕ обязательны):
1) multiply:
  Тип данных: number
  Зачем нужен?: умножает tpx, tpy, tpz на это число при создании луча, фактически это изменение модуля вектора в multiply раз.
  Значение по умолчанию: 1
2) dimension:
  Тип данных: Dimension
  Зачем нужен?: задаёт измерение, в котором существует луч
  Значение по умолчанию: overworld
3) source:
  Тип данных: Entity
  Зачем нужен?: это объект сущности или игрока, который запустил луч
  Значение по умолчанию: отсутствует
4) ignoreBlocks:
  Тип данных: bool
  Зачем нужен?: если true, то луч проходит сквозь блоки, если false, то удаляется по контакте с блоком
  Значение по умолчанию: false
5) autoMove:
  Тип данных: bool
  Зачем нужен?: если true, то луч автоматически движется, если false, то вам нужно будет вручную сделать движение луча в функции func()
  Значение по умолчанию: true
6) onDeathFunc:
  Тип данных: Function
  Зачем нужен?: эта функция сработает при удалении луча, важно! Она не сработает при удалалении в случае ошибки (например когда луч улетел вне зоны прогрузки)
  Значение по умолчанию: отсутствует
7) stepsPerTick:
  Тип данных: number
  Зачем нужен?: задаёт количество "шагов" луча в тик. Например, если stepsPerTick = 2, то каждый тик луч переместится 2 раза и выполнит функцию func() 2 раза.
  Важно: параметр может принимать ЛЮБЫЕ положительные числа, например если stepsPerTick = 0.25, то луч будет двигаться раз в 4 тика и функция func() тоже сработает раз в 4 тика
  Значение по умолчанию: 1
8) l:
  Тип данных: number
  Зачем нужен?: поворачивает луч на выбранное количество градусов в плоскости XOZ
  Значение по умолчанию: 0

Функция func(obj) принимает в качестве параметра объект луча obj, данный объект имеет все вышеперечисленные свойства по типу obj.maxSteps, obj.x, obj.ignoreBlocks и тд, и ещё такие свойства:
1) id: целое число от 0 до бесконечности, уникальный айди луча
2) step: количество "шагов", которое совершил луч, это число может быть дробным
3) tpLength: модуль вектора перемещения с координатами (tpx,tpy,tpz)

Также я добавил функции для управления лучом (они принимают объект луча в качестве параметра):
1) move(obj) передвигает луч на 1 шаг вперёд
2) deleteRay(obj) удаляет луч
3) rotate(obj, l) поворачивает луч на l градусов
